Key,Value
SVM,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=95)),
                ('model', SVC(C=100, probability=True, random_state=42))]), 'params': {'model_params': {'kernel': 'rbf', 'C': 100, 'gamma': 'scale'}, 'pca_components': 95}, 'accuracy': 0.7955555555555556, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.73      0.73      0.73        15\n     Airport       0.74      0.93      0.82        15\n       Beach       0.71      1.00      0.83        15\n        City       0.92      0.73      0.81        15\n      Desert       0.79      0.73      0.76        15\n      Forest       0.82      0.93      0.88        15\n   Grassland       0.79      0.73      0.76        15\n     Highway       0.87      0.87      0.87        15\n        Lake       0.62      0.67      0.65        15\n    Mountain       0.92      0.80      0.86        15\n     Parking       0.93      0.93      0.93        15\n        Port       1.00      0.67      0.80        15\n     Railway       0.75      0.80      0.77        15\n Residential       0.76      0.87      0.81        15\n       River       0.73      0.53      0.62        15\n\n    accuracy                           0.80       225\n   macro avg       0.81      0.80      0.79       225\nweighted avg       0.81      0.80      0.79       225\n', 'conf_matrix': array([[11,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  1,  1,  0],
       [ 0, 14,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
       [ 0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  1, 11,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0],
       [ 0,  0,  1,  0, 11,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 14,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  0,  1, 11,  0,  1,  0,  0,  0,  0,  0,  1],
       [ 0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  2,  0,  0],
       [ 0,  1,  1,  0,  2,  0,  0,  0, 10,  0,  0,  0,  0,  0,  1],
       [ 1,  0,  1,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  1],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  1,  0],
       [ 1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0, 10,  0,  0,  0],
       [ 0,  1,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0, 12,  0,  0],
       [ 0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0, 13,  0],
       [ 1,  1,  1,  0,  1,  1,  0,  0,  1,  0,  0,  0,  0,  1,  8]])}"
KNN,"{'model': Pipeline(steps=[('scaler', StandardScaler()),
                ('model',
                 KNeighborsClassifier(n_neighbors=7, weights='distance'))]), 'params': {'model_params': {'n_neighbors': 7, 'weights': 'distance'}, 'pca_components': None}, 'accuracy': 0.6933333333333334, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.73      0.53      0.62        15\n     Airport       0.75      0.60      0.67        15\n       Beach       0.70      0.93      0.80        15\n        City       0.65      0.73      0.69        15\n      Desert       0.80      0.53      0.64        15\n      Forest       1.00      1.00      1.00        15\n   Grassland       0.91      0.67      0.77        15\n     Highway       0.71      0.80      0.75        15\n        Lake       0.50      0.47      0.48        15\n    Mountain       0.69      0.73      0.71        15\n     Parking       0.92      0.80      0.86        15\n        Port       0.80      0.53      0.64        15\n     Railway       0.65      0.73      0.69        15\n Residential       0.70      0.93      0.80        15\n       River       0.27      0.40      0.32        15\n\n    accuracy                           0.69       225\n   macro avg       0.72      0.69      0.70       225\nweighted avg       0.72      0.69      0.70       225\n', 'conf_matrix': array([[ 8,  0,  1,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  1,  2],
       [ 0,  9,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  3],
       [ 1,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1],
       [ 0,  0,  2,  1,  8,  0,  1,  0,  0,  3,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  0,  0, 10,  1,  0,  0,  0,  0,  0,  0,  3],
       [ 0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  2,  1,  0],
       [ 0,  1,  0,  0,  0,  0,  0,  0,  7,  1,  0,  2,  0,  0,  4],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  1, 11,  0,  0,  1,  0,  2],
       [ 0,  0,  1,  1,  0,  0,  0,  0,  0,  0, 12,  0,  0,  1,  0],
       [ 0,  0,  0,  1,  0,  0,  0,  0,  3,  0,  1,  8,  1,  0,  1],
       [ 0,  0,  0,  2,  0,  0,  0,  2,  0,  0,  0,  0, 11,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 14,  0],
       [ 0,  2,  2,  0,  2,  0,  0,  0,  1,  1,  0,  0,  0,  1,  6]])}"
RF,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=25)),
                ('model',
                 RandomForestClassifier(n_estimators=200, random_state=42))]), 'params': {'model_params': {'n_estimators': 200, 'max_depth': None, 'max_features': 'sqrt'}, 'pca_components': 25}, 'accuracy': 0.7244444444444444, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.55      0.73      0.63        15\n     Airport       0.78      0.47      0.58        15\n       Beach       0.74      0.93      0.82        15\n        City       0.85      0.73      0.79        15\n      Desert       0.71      0.80      0.75        15\n      Forest       0.74      0.93      0.82        15\n   Grassland       0.82      0.60      0.69        15\n     Highway       0.81      0.87      0.84        15\n        Lake       0.75      0.60      0.67        15\n    Mountain       0.87      0.87      0.87        15\n     Parking       0.72      0.87      0.79        15\n        Port       0.82      0.60      0.69        15\n     Railway       0.67      0.67      0.67        15\n Residential       0.57      0.87      0.68        15\n       River       0.71      0.33      0.45        15\n\n    accuracy                           0.72       225\n   macro avg       0.74      0.72      0.72       225\nweighted avg       0.74      0.72      0.72       225\n', 'conf_matrix': array([[11,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1,  1,  0],
       [ 1,  7,  0,  1,  1,  0,  0,  2,  0,  0,  0,  0,  1,  1,  1],
       [ 0,  0, 14,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0, 11,  1,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0],
       [ 0,  1,  0,  0, 12,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 14,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 3,  0,  0,  0,  0,  1,  9,  0,  0,  0,  0,  0,  0,  1,  1],
       [ 0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  1,  1,  0],
       [ 0,  1,  1,  0,  1,  0,  0,  0,  9,  0,  0,  1,  0,  2,  0],
       [ 0,  0,  0,  0,  2,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0],
       [ 0,  0,  1,  1,  0,  1,  0,  0,  1,  0,  1,  9,  0,  1,  0],
       [ 1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  3,  0, 10,  0,  0],
       [ 1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 13,  0],
       [ 3,  0,  2,  0,  0,  1,  0,  0,  1,  0,  0,  1,  1,  1,  5]])}"
XGBoost,"{'model': Pipeline(steps=[('scaler', StandardScaler()),
                ('model',
                 XGBClassifier(base_score=None, booster=None, callbacks=None,
                               colsample_bylevel=None, colsample_bynode=None,
                               colsample_bytree=0.8, device=None,
                               early_stopping_rounds=None,
                               enable_categorical=False, eval_metric='mlogloss',
                               feature_types=None, feature_weights=None,
                               gamma=None, grow_policy=None,
                               importance_type=None,
                               interaction_constraints=None, learning_rate=0.1,
                               max_bin=None, max_cat_threshold=None,
                               max_cat_to_onehot=None, max_delta_step=None,
                               max_depth=5, max_leaves=None,
                               min_child_weight=None, missing=nan,
                               monotone_constraints=None, multi_strategy=None,
                               n_estimators=100, n_jobs=-1,
                               num_parallel_tree=None, ...))]), 'params': {'model_params': {'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.1, 'subsample': 0.8, 'colsample_bytree': 0.8}, 'pca_components': None}, 'accuracy': 0.7333333333333333, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.67      0.67      0.67        15\n     Airport       0.93      0.93      0.93        15\n       Beach       0.70      0.93      0.80        15\n        City       0.80      0.53      0.64        15\n      Desert       0.75      0.80      0.77        15\n      Forest       0.79      1.00      0.88        15\n   Grassland       0.90      0.60      0.72        15\n     Highway       0.92      0.73      0.81        15\n        Lake       0.60      0.60      0.60        15\n    Mountain       0.86      0.80      0.83        15\n     Parking       0.76      0.87      0.81        15\n        Port       0.91      0.67      0.77        15\n     Railway       0.62      0.67      0.65        15\n Residential       0.62      0.87      0.72        15\n       River       0.36      0.33      0.34        15\n\n    accuracy                           0.73       225\n   macro avg       0.75      0.73      0.73       225\nweighted avg       0.75      0.73      0.73       225\n', 'conf_matrix': array([[10,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  2,  1],
       [ 0, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0],
       [ 0,  0, 14,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  8,  1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  1],
       [ 0,  0,  1,  1, 12,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  0,  3,  9,  0,  0,  0,  0,  0,  0,  0,  2],
       [ 0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  3,  1,  0],
       [ 1,  1,  2,  0,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0,  1],
       [ 1,  0,  0,  0,  1,  0,  0,  0,  0, 12,  0,  0,  0,  0,  1],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  1, 10,  0,  0,  2],
       [ 0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  2,  0, 10,  0,  1],
       [ 1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 13,  0],
       [ 1,  0,  1,  0,  1,  1,  0,  0,  3,  2,  0,  0,  0,  1,  5]])}"
CatBoost,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=75)),
                ('model',
                 <catboost.core.CatBoostClassifier object at 0x7a1d18703f90>)]), 'params': {'model_params': {'iterations': 200, 'learning_rate': 0.1, 'depth': 6, 'l2_leaf_reg': 3}, 'pca_components': 75}, 'accuracy': 0.7288888888888889, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.48      0.67      0.56        15\n     Airport       0.92      0.73      0.81        15\n       Beach       0.72      0.87      0.79        15\n        City       1.00      0.80      0.89        15\n      Desert       0.71      0.80      0.75        15\n      Forest       0.78      0.93      0.85        15\n   Grassland       0.82      0.60      0.69        15\n     Highway       0.92      0.80      0.86        15\n        Lake       0.65      0.73      0.69        15\n    Mountain       0.69      0.73      0.71        15\n     Parking       0.68      0.87      0.76        15\n        Port       1.00      0.67      0.80        15\n     Railway       0.60      0.60      0.60        15\n Residential       0.67      0.93      0.78        15\n       River       0.60      0.20      0.30        15\n\n    accuracy                           0.73       225\n   macro avg       0.75      0.73      0.72       225\nweighted avg       0.75      0.73      0.72       225\n', 'conf_matrix': array([[10,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  2,  1],
       [ 0, 11,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0,  1,  0,  0],
       [ 0,  0, 13,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0],
       [ 0,  0,  1,  0, 12,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 14,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 3,  0,  0,  0,  0,  1,  9,  0,  1,  0,  0,  0,  1,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  1,  0,  1,  1,  0],
       [ 2,  1,  0,  0,  0,  0,  0,  0, 11,  1,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  3,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0],
       [ 1,  0,  1,  0,  0,  0,  0,  0,  1,  1,  0, 10,  0,  0,  1],
       [ 1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  3,  0,  9,  1,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 14,  0],
       [ 3,  0,  2,  0,  0,  2,  0,  0,  1,  2,  1,  0,  0,  1,  3]])}"
LogisticRegression,"{'model': Pipeline(steps=[('scaler', StandardScaler()),
                ('model',
                 LogisticRegression(max_iter=1000, multi_class='multinomial',
                                    n_jobs=-1, random_state=42))]), 'params': {'model_params': {'C': 1.0, 'penalty': 'l2', 'solver': 'lbfgs'}, 'pca_components': None}, 'accuracy': 0.7777777777777778, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.59      0.67      0.62        15\n     Airport       0.77      0.67      0.71        15\n       Beach       0.78      0.93      0.85        15\n        City       0.92      0.73      0.81        15\n      Desert       0.93      0.87      0.90        15\n      Forest       0.83      1.00      0.91        15\n   Grassland       0.92      0.73      0.81        15\n     Highway       0.81      0.87      0.84        15\n        Lake       0.75      0.80      0.77        15\n    Mountain       1.00      0.93      0.97        15\n     Parking       0.87      0.87      0.87        15\n        Port       0.91      0.67      0.77        15\n     Railway       0.67      0.67      0.67        15\n Residential       0.70      0.93      0.80        15\n       River       0.36      0.33      0.34        15\n\n    accuracy                           0.78       225\n   macro avg       0.79      0.78      0.78       225\nweighted avg       0.79      0.78      0.78       225\n', 'conf_matrix': array([[10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  1],
       [ 2, 10,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  2],
       [ 0,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1],
       [ 0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  1,  0,  2,  1,  0],
       [ 0,  0,  0,  0, 13,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  0,  1, 11,  0,  0,  0,  0,  0,  0,  0,  2],
       [ 0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  2,  0,  0],
       [ 1,  0,  1,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  1],
       [ 1,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  1,  0,  1,  0],
       [ 0,  0,  1,  1,  0,  0,  0,  0,  2,  0,  0, 10,  0,  0,  1],
       [ 0,  1,  0,  0,  0,  0,  0,  2,  0,  0,  1,  0, 10,  0,  1],
       [ 0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0],
       [ 2,  1,  2,  0,  1,  1,  0,  0,  2,  0,  0,  0,  0,  1,  5]])}"
Stacking,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=95)),
                ('model',
                 StackingClassifier(cv=3,
                                    estimators=[('rf',
                                                 RandomForestClassifier(random_state=42)),
                                                ('svm',
                                                 SVC(probability=True,
                                                     random_state=42)),
                                                ('log',
                                                 LogisticRegression(penalty='l1',
                                                                    random_state=42,
                                                                    solver='saga')),
                                                ('xgb',
                                                 XGBClassifier(base_score=None,
                                                               booster=None,
                                                               callbacks=None,
                                                               col...
                                                               learning_rate=None,
                                                               max_bin=None,
                                                               max_cat_threshold=None,
                                                               max_cat_to_onehot=None,
                                                               max_delta_step=None,
                                                               max_depth=None,
                                                               max_leaves=None,
                                                               min_child_weight=None,
                                                               missing=nan,
                                                               monotone_constraints=None,
                                                               multi_strategy=None,
                                                               n_estimators=None,
                                                               n_jobs=None,
                                                               num_parallel_tree=None, ...))],
                                    final_estimator=RandomForestClassifier(n_estimators=50,
                                                                           random_state=42),
                                    n_jobs=-1))]), 'params': {'model_params': {'estimators': [('rf', RandomForestClassifier(random_state=42)), ('svm', SVC(probability=True, random_state=42)), ('log', LogisticRegression(penalty='l1', random_state=42, solver='saga')), ('xgb', XGBClassifier(base_score=None, booster=None, callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric='mlogloss',
              feature_types=None, feature_weights=None, gamma=None,
              grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=None,
              num_parallel_tree=None, ...))], 'final_estimator': RandomForestClassifier(n_estimators=50, random_state=42), 'cv': 3}, 'pca_components': 95}, 'accuracy': 0.76, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.56      0.60      0.58        15\n     Airport       0.81      0.87      0.84        15\n       Beach       0.70      0.93      0.80        15\n        City       0.92      0.73      0.81        15\n      Desert       0.67      0.67      0.67        15\n      Forest       0.79      1.00      0.88        15\n   Grassland       0.91      0.67      0.77        15\n     Highway       0.93      0.87      0.90        15\n        Lake       0.56      0.67      0.61        15\n    Mountain       0.92      0.80      0.86        15\n     Parking       0.76      0.87      0.81        15\n        Port       1.00      0.73      0.85        15\n     Railway       0.69      0.60      0.64        15\n Residential       0.74      0.93      0.82        15\n       River       0.64      0.47      0.54        15\n\n    accuracy                           0.76       225\n   macro avg       0.77      0.76      0.76       225\nweighted avg       0.77      0.76      0.76       225\n', 'conf_matrix': array([[ 9,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  1,  2,  1],
       [ 2, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0, 14,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0, 11,  1,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0],
       [ 0,  0,  1,  0, 10,  2,  1,  0,  0,  1,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 2,  0,  0,  0,  0,  0, 10,  0,  2,  0,  0,  0,  0,  0,  1],
       [ 0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  2,  0,  0],
       [ 0,  1,  1,  0,  2,  0,  0,  0, 10,  0,  0,  0,  0,  0,  1],
       [ 1,  0,  0,  0,  0,  0,  0,  0,  1, 12,  0,  0,  0,  0,  1],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0],
       [ 0,  0,  1,  0,  0,  1,  0,  0,  2,  0,  0, 11,  0,  0,  0],
       [ 0,  1,  0,  1,  0,  0,  0,  1,  0,  0,  3,  0,  9,  0,  0],
       [ 0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0],
       [ 2,  0,  2,  0,  1,  1,  0,  0,  1,  0,  0,  0,  0,  1,  7]])}"
K-means,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=75)),
                ('model', KMeansClassifier(n_clusters=45))]), 'params': {'model_params': {'n_clusters': 45}, 'pca_components': 75}, 'accuracy': 0.4533333333333333, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.50      0.27      0.35        15\n     Airport       0.20      0.07      0.10        15\n       Beach       0.32      0.87      0.46        15\n        City       0.26      0.33      0.29        15\n      Desert       0.83      0.33      0.48        15\n      Forest       0.62      0.53      0.57        15\n   Grassland       0.73      0.53      0.62        15\n     Highway       0.39      0.60      0.47        15\n        Lake       0.00      0.00      0.00        15\n    Mountain       0.50      0.40      0.44        15\n     Parking       0.81      0.87      0.84        15\n        Port       0.75      0.60      0.67        15\n     Railway       0.50      0.53      0.52        15\n Residential       0.55      0.80      0.65        15\n       River       0.05      0.07      0.06        15\n\n    accuracy                           0.45       225\n   macro avg       0.47      0.45      0.43       225\nweighted avg       0.47      0.45      0.43       225\n', 'conf_matrix': array([[ 4,  1,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  1],
       [ 1,  1,  1,  3,  0,  0,  0,  3,  0,  1,  0,  0,  1,  0,  4],
       [ 1,  0, 13,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  1,  5,  0,  1,  0,  4,  0,  0,  1,  1,  0,  2,  0],
       [ 0,  0,  7,  1,  5,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  8,  1,  0,  0,  4,  0,  0,  0,  0,  2],
       [ 0,  0,  3,  0,  0,  2,  8,  0,  0,  0,  0,  0,  0,  0,  2],
       [ 1,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  0,  3,  1,  0],
       [ 1,  1,  6,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  4],
       [ 0,  0,  1,  4,  0,  0,  0,  2,  0,  6,  0,  0,  0,  0,  2],
       [ 0,  0,  0,  0,  0,  0,  0,  1,  0,  0, 13,  0,  0,  1,  0],
       [ 0,  1,  1,  0,  0,  1,  0,  0,  2,  0,  1,  9,  0,  0,  0],
       [ 0,  0,  0,  1,  0,  0,  0,  3,  0,  0,  1,  0,  8,  1,  1],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 12,  2],
       [ 0,  1,  4,  1,  1,  1,  1,  0,  0,  0,  0,  0,  4,  1,  1]])}"
GMM,"{'model': Pipeline(steps=[('scaler', StandardScaler()), ('pca', PCA(n_components=75)),
                ('model',
                 GMMClassifier(covariance_type='tied', n_components=30))]), 'params': {'model_params': {'n_components': 30, 'covariance_type': 'tied'}, 'pca_components': 75}, 'accuracy': 0.5688888888888889, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.78      0.47      0.58        15\n     Airport       1.00      0.07      0.12        15\n       Beach       0.37      0.73      0.49        15\n        City       0.67      0.53      0.59        15\n      Desert       0.86      0.40      0.55        15\n      Forest       1.00      0.60      0.75        15\n   Grassland       0.59      0.67      0.62        15\n     Highway       0.65      0.87      0.74        15\n        Lake       0.20      0.20      0.20        15\n    Mountain       0.48      0.87      0.62        15\n     Parking       1.00      0.73      0.85        15\n        Port       0.88      0.47      0.61        15\n     Railway       0.34      0.73      0.47        15\n Residential       0.78      0.93      0.85        15\n       River       0.44      0.27      0.33        15\n\n    accuracy                           0.57       225\n   macro avg       0.67      0.57      0.56       225\nweighted avg       0.67      0.57      0.56       225\n', 'conf_matrix': array([[ 7,  0,  1,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  1,  3],
       [ 1,  1,  0,  1,  0,  0,  0,  3,  0,  0,  0,  0,  8,  0,  1],
       [ 1,  0, 11,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  1,  5,  0,  1],
       [ 0,  0,  3,  1,  6,  0,  2,  0,  1,  2,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  9,  4,  0,  0,  1,  0,  0,  0,  1,  0],
       [ 0,  0,  2,  0,  0,  0, 10,  0,  0,  3,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  1,  0,  0, 13,  0,  0,  0,  0,  1,  0,  0],
       [ 0,  0,  8,  0,  0,  0,  0,  0,  3,  3,  0,  0,  1,  0,  0],
       [ 0,  0,  0,  1,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  3,  1,  0],
       [ 0,  0,  2,  1,  0,  0,  0,  0,  4,  0,  0,  7,  1,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0, 11,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 14,  0],
       [ 0,  0,  3,  0,  0,  0,  1,  0,  1,  5,  0,  0,  0,  1,  4]])}"
Voting,"{'model': VotingClassifier(estimators=[('SVM',
                              Pipeline(steps=[('scaler', StandardScaler()),
                                              ('pca', PCA(n_components=95)),
                                              ('model',
                                               SVC(C=100, probability=True,
                                                   random_state=42))])),
                             ('KNN',
                              Pipeline(steps=[('scaler', StandardScaler()),
                                              ('model',
                                               KNeighborsClassifier(n_neighbors=7,
                                                                    weights='distance'))])),
                             ('RF',
                              Pipeline(steps=[('scaler', StandardScaler()),
                                              ('pca', PCA(n_co...
                                                             num_parallel_tree=None, ...))])),
                             ('CatBoost',
                              Pipeline(steps=[('scaler', StandardScaler()),
                                              ('pca', PCA(n_components=75)),
                                              ('model',
                                               <catboost.core.CatBoostClassifier object at 0x7a1d4dbc6450>)])),
                             ('LogisticRegression',
                              Pipeline(steps=[('scaler', StandardScaler()),
                                              ('model',
                                               LogisticRegression(max_iter=1000,
                                                                  multi_class='multinomial',
                                                                  n_jobs=-1,
                                                                  random_state=42))]))],
                 voting='soft'), 'params': {'models': ['SVM', 'KNN', 'RF', 'XGBoost', 'CatBoost', 'LogisticRegression']}, 'accuracy': 0.8, 'report': '              precision    recall  f1-score   support\n\n Agriculture       0.62      0.67      0.65        15\n     Airport       0.88      0.93      0.90        15\n       Beach       0.71      1.00      0.83        15\n        City       0.92      0.80      0.86        15\n      Desert       0.92      0.73      0.81        15\n      Forest       0.83      1.00      0.91        15\n   Grassland       0.91      0.67      0.77        15\n     Highway       0.92      0.80      0.86        15\n        Lake       0.80      0.80      0.80        15\n    Mountain       0.93      0.87      0.90        15\n     Parking       0.87      0.87      0.87        15\n        Port       1.00      0.73      0.85        15\n     Railway       0.75      0.80      0.77        15\n Residential       0.70      0.93      0.80        15\n       River       0.43      0.40      0.41        15\n\n    accuracy                           0.80       225\n   macro avg       0.81      0.80      0.80       225\nweighted avg       0.81      0.80      0.80       225\n', 'conf_matrix': array([[10,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  2,  1],
       [ 1, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0],
       [ 0,  0,  1,  0, 11,  1,  1,  0,  0,  1,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 1,  0,  0,  0,  0,  1, 10,  0,  0,  0,  0,  0,  0,  0,  3],
       [ 0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  2,  1,  0],
       [ 1,  0,  1,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  1],
       [ 1,  0,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  1],
       [ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  0],
       [ 0,  0,  1,  1,  0,  0,  0,  0,  1,  0,  0, 11,  0,  0,  1],
       [ 0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0, 12,  0,  1],
       [ 0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 14,  0],
       [ 2,  1,  2,  0,  1,  1,  0,  0,  1,  0,  0,  0,  0,  1,  6]])}"
